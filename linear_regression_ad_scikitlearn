feature_cols=['TV','Radio','Newspaper']
X=data[feature_cols]
y=data.Sales

from sklearn.linear_model import LinearRegression
lm=LinearRegression()
lm.fit(X,y)

print lm.intercept_
print lm.coef_
zip(feature_cols,lm.coef_)
lm.predict([100,25,25])
lm.score(X,y)  # get R-squared. p-values and CI are not easy to access through scikit-learn
import numpy as np
np.random.seed(12345)

nums=np.random.rand(len(data))
mask_large=nums>0.5
data['Size']='Small'
data.loc[mask_large,'Size']='Large'
data.head()

data['IsLarge']=data.Size.map({'Small':0,'Large':1})
data.head()
feature_cols=['TV','Radio','Newspaper','IsLarge']
X=data[feature_cols]
y=data.Sales
lm=LinearRegression()
lm.fit(X,y)
zip(feature_cols,lm.coef_)
np.random.seed(123456)
nums=np.random.rand(len(data))
mask_suburban=(nums>0.33)&(nums<0.66)
mask_urban=nums>=0.66
data['Area']='rural'
data.loc[mask_suburban,'Area']='suburban'
data.loc[mask_urban,'Area']='urban'
data.head()
area_dummies=pd.get_dummies(data.Area,prefix='Area').iloc[:,1:]
data=pd.concat([data,area_dummies],axis=1)
data.head()
feature_cols=['TV','Radio','Newspaper','IsLarge','Area_suburban','Area_urban']
X=data[feature_cols]
y=data.Sales
lm=LinearRegression()
lm.fit(X,y)
zip(feature_cols,lm.coef_)
